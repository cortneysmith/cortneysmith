{"version":3,"sources":["Components/App.tsx","butter-client.tsx","Components/Blog.tsx","Components/BlogPost.tsx","Components/Router.tsx","serviceWorker.ts","index.tsx"],"names":["App","state","meta","data","react_default","a","createElement","className","href","Component","butter","Butter","Blog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","match","page","params","post","list","page_size","resp","setState","_this$state$meta","next_page","previous_page","map","key","react_router_dom","to","concat","slug","title","withRouter","BlogPost","retrieve","seo_title","name","content","meta_description","featured_image","dangerouslySetInnerHTML","__html","body","React","Router","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","Components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be487829.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\ninterface AppState {}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    meta: {},\r\n    data: []\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <p>This is my app!</p>\r\n        <p>\r\n          <a href=\"/blog\">Go to the blog...</a>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import Butter from \"buttercms\";\r\n\r\nconst butter = Butter(\"6a66c029b49835315de8c84064be09ac44ccdf7c\");\r\n\r\nexport default butter;\r\n","import React, { Component } from \"react\";\r\nimport { Link, withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport butter from \"../butter-client\";\r\nimport \"../css/blog.css\";\r\n\r\ninterface BlogState {\r\n  meta: any;\r\n  data: any[];\r\n}\r\n\r\ninterface BlogParams {\r\n  page: any;\r\n}\r\n\r\nclass Blog extends Component<RouteComponentProps<BlogParams>, BlogState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { meta: {}, data: [] };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { match } = this.props;\r\n    let page = match.params.page || 1;\r\n\r\n    const resp = await butter.post.list({ page: page, page_size: 10 });\r\n    this.setState(resp.data);\r\n  }\r\n\r\n  render() {\r\n    const { next_page, previous_page } = this.state.meta;\r\n\r\n    return (\r\n      <div>\r\n        {this.state.data.map((post: any, key: any) => {\r\n          return (\r\n            <div key={key}>\r\n              <Link to={`/blog/posts/${post.slug}`}>{post.title}</Link>\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        <br />\r\n\r\n        <div>\r\n          {previous_page && (\r\n            <Link to={`/blog/${previous_page}`}>\r\n              <a>Prev</a>\r\n            </Link>\r\n          )}\r\n\r\n          {next_page && (\r\n            <Link to={`/blog/${next_page}`}>\r\n              <a>Next</a>\r\n            </Link>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Blog);\r\n","import React from \"react\";\r\nimport butter from \"../butter-client\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\n\r\ninterface BlogPostState {\r\n  data: any;\r\n}\r\n\r\ninterface BlogPostParams {\r\n  post: any;\r\n}\r\n\r\nclass BlogPost extends React.Component<\r\n  RouteComponentProps<BlogPostParams>,\r\n  BlogPostState\r\n> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { data: {} };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { match } = this.props;\r\n    const resp = await butter.post.retrieve(match.params.post);\r\n    this.setState(resp.data);\r\n  }\r\n\r\n  render() {\r\n    const post = this.state.data;\r\n\r\n    return (\r\n      <div className=\"blog_post\">\r\n        <title>{post.seo_title}</title>\r\n        <meta name=\"description\" content={post.meta_description} />\r\n        <meta name=\"og:image\" content={post.featured_image} />\r\n        <h1>{post.title}</h1>\r\n        <div dangerouslySetInnerHTML={{ __html: post.body }} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(BlogPost);\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport Blog from \"./Blog\";\r\nimport BlogPost from \"./BlogPost\";\r\n\r\nconst Router = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={App} />\r\n      <Route exact path=\"/blog\" component={Blog} />\r\n      <Route exact path=\"/blog/posts/:post\" component={BlogPost} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Router;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/index.css\";\r\nimport Router from \"./Components/Router\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Router />, document.getElementById(\"main\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}